{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst https = require('https');\n\nconst http = require('http');\n\nconst net = require('net');\n\nconst tls = require('tls');\n\nconst {\n  randomBytes,\n  createHash\n} = require('crypto');\n\nconst {\n  Readable\n} = require('stream');\n\nconst {\n  URL\n} = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst Receiver = require('./receiver');\n\nconst Sender = require('./sender');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\n\nconst {\n  EventTarget: {\n    addEventListener,\n    removeEventListener\n  }\n} = require('./event-target');\n\nconst {\n  format,\n  parse\n} = require('./extension');\n\nconst {\n  toBuffer\n} = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\n\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n\n\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n    this._binaryType = type; //\n    // Allow to change `binaryType` on the fly.\n    //\n\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n  /**\n   * @type {String}\n   */\n\n\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n  /**\n   * @type {Function}\n   */\n\n  /* istanbul ignore next */\n\n\n  get onclose() {\n    return null;\n  }\n  /**\n   * @type {Function}\n   */\n\n  /* istanbul ignore next */\n\n\n  get onerror() {\n    return null;\n  }\n  /**\n   * @type {Function}\n   */\n\n  /* istanbul ignore next */\n\n\n  get onopen() {\n    return null;\n  }\n  /**\n   * @type {Function}\n   */\n\n  /* istanbul ignore next */\n\n\n  get onmessage() {\n    return null;\n  }\n  /**\n   * @type {String}\n   */\n\n\n  get protocol() {\n    return this._protocol;\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get readyState() {\n    return this._readyState;\n  }\n  /**\n   * @type {String}\n   */\n\n\n  get url() {\n    return this._url;\n  }\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n\n\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n    socket.setTimeout(0);\n    socket.setNoDelay();\n    if (head.length > 0) socket.unshift(head);\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n\n\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n\n\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n\n    this._sender.close(code, data, !this._isServer, err => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n      this._closeFrameSent = true;\n\n      if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n        this._socket.end();\n      }\n    }); //\n    // Specify a timeout for the closing handshake to complete.\n    //\n\n\n    this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n  }\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n\n\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n\n\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n\n\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n\n\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n\n      this._socket.destroy();\n    }\n  }\n\n}\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\n\n\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\n\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\n\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\n\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\n\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\n\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\n\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\n\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n['binaryType', 'bufferedAmount', 'extensions', 'protocol', 'readyState', 'url'].forEach(property => {\n  Object.defineProperty(WebSocket.prototype, property, {\n    enumerable: true\n  });\n}); //\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n\n['open', 'error', 'close', 'message'].forEach(method => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n\n  });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\n\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    throw new SyntaxError('The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"');\n  }\n\n  if (isUnixSocket && !parsedUrl.pathname) {\n    throw new SyntaxError(\"The URL's pathname is empty\");\n  }\n\n  if (parsedUrl.hash) {\n    throw new SyntaxError('The URL contains a fragment identifier');\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (typeof protocol !== 'string' || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {\n        throw new SyntaxError('An invalid or duplicated subprotocol was specified');\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = websocket._req = get(opts);\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', err => {\n    if (req === null || req.aborted) return;\n    req = websocket._req = null;\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n  req.on('response', res => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n      const addr = new URL(location, address);\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n    }\n  });\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res); //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n    req = websocket._req = null;\n    const digest = createHash('sha1').update(key + GUID).digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message = 'Server sent a Sec-WebSocket-Extensions header but no extension ' + 'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\n\n\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\n\n\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\n\n\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\n\n\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length; //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n\n    if (websocket._socket) websocket._sender._bufferedBytes += length;else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n    cb(err);\n  }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\n\n\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  process.nextTick(resume, websocket._socket);\n  if (code === 1005) websocket.close();else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\n\n\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\n\n\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData); //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n\n\n    process.nextTick(resume, websocket._socket);\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\n\n\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\n\n\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\n\n\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\n\n\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\n\n\nfunction resume(stream) {\n  stream.resume();\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\n\n\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n  websocket._readyState = WebSocket.CLOSING;\n  let chunk; //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n\n  if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n  clearTimeout(websocket._closeTimer);\n\n  if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\n\n\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\n\n\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n  websocket._readyState = WebSocket.CLOSING;\n\n  websocket._receiver.end();\n\n  this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\n\n\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}","map":{"version":3,"sources":["/home/majimenez/Desktop/proyects/chat/frontend/node_modules/engine.io/node_modules/ws/lib/websocket.js"],"names":["EventEmitter","require","https","http","net","tls","randomBytes","createHash","Readable","URL","PerMessageDeflate","Receiver","Sender","BINARY_TYPES","EMPTY_BUFFER","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","EventTarget","addEventListener","removeEventListener","format","parse","toBuffer","readyStates","subprotocolRegex","protocolVersions","closeTimeout","WebSocket","constructor","address","protocols","options","_binaryType","_closeCode","_closeFrameReceived","_closeFrameSent","_closeMessage","_closeTimer","_extensions","_protocol","_readyState","CONNECTING","_receiver","_sender","_socket","_bufferedAmount","_isServer","_redirects","undefined","Array","isArray","initAsClient","binaryType","type","includes","bufferedAmount","_writableState","length","_bufferedBytes","extensions","Object","keys","join","onclose","onerror","onopen","onmessage","protocol","readyState","url","_url","setSocket","socket","head","receiver","isServer","maxPayload","skipUTF8Validation","on","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","setTimeout","setNoDelay","unshift","socketOnClose","socketOnData","socketOnEnd","socketOnError","OPEN","emit","emitClose","CLOSED","extensionName","cleanup","removeAllListeners","close","code","data","msg","abortHandshake","_req","CLOSING","errorEmitted","end","err","destroy","bind","ping","mask","cb","Error","toString","sendAfterClose","pong","send","opts","binary","compress","fin","terminate","defineProperty","enumerable","value","indexOf","prototype","forEach","property","method","get","listener","listeners","set","handler","removeListener","module","exports","websocket","protocolVersion","perMessageDeflate","followRedirects","maxRedirects","createConnection","socketPath","hostname","timeout","host","path","port","RangeError","parsedUrl","href","e","SyntaxError","isSecure","isUnixSocket","pathname","hash","defaultPort","key","protocolSet","Set","tlsConnect","netConnect","startsWith","slice","headers","Connection","Upgrade","search","handshakeTimeout","offer","test","has","add","origin","Origin","username","password","auth","parts","split","req","aborted","res","location","statusCode","abort","addr","digest","update","serverProt","protError","size","secWebSocketExtensions","message","extensionNames","accept","connect","servername","isIP","stream","captureStackTrace","setHeader","destroyed","once","reason","process","nextTick","resume","receiverOnFinish","isBinary","chunk","_readableState","endEmitted","read","write","clearTimeout","finished","pause"],"mappings":"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","sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    throw new SyntaxError(\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"'\n    );\n  }\n\n  if (isUnixSocket && !parsedUrl.pathname) {\n    throw new SyntaxError(\"The URL's pathname is empty\");\n  }\n\n  if (parsedUrl.hash) {\n    throw new SyntaxError('The URL contains a fragment identifier');\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      const addr = new URL(location, address);\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}